# -*- coding: utf-8 -*-
"""Python with DA Proj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12dJSQJMLXNS4utqkH63qJjh-pKdWCVmc
"""

import pandas as pd

# Load the dataset
file_path = '/content/Augmented_IndiaTransactMultiFacet2024.csv'
df = pd.read_csv(file_path)

# Display the first few rows of the dataset
df.head()

# Display the column names to identify the correct ones
print(df.columns)

# Check for null values in the dataset
print(df.isnull().sum())

# Remove all rows with null values
df_cleaned = df.dropna()

# Verify if all null values are removed
print(df_cleaned.isnull().sum())

print(df_cleaned.isnull().sum())

cleaned_file_path = '/content/Cleaned_Augmented_IndiaTransactMultiFacet2024.csv'
df_cleaned.to_csv(cleaned_file_path, index=False)

print(f"Cleaned dataset saved to {cleaned_file_path}")

import os

# List all files in the /content directory
os.listdir('/content')

import matplotlib.pyplot as plt
import seaborn as sns

# Load the cleaned dataset
file_path = '/content/Cleaned_Augmented_IndiaTransactMultiFacet2024.csv'
df_cleaned = pd.read_csv(file_path)

# 1.What is the distribution of transaction amounts across different merchant categories?

# Display summary statistics for each merchant category
category_group = df.groupby('category')['amt'].describe()
print(category_group)

# Set up the plot
plt.figure(figsize=(8, 4))

# Plot a boxplot to show the distribution of transaction amounts across merchant categories
sns.boxplot(x='category', y='amt', data=df)
plt.xticks(rotation=90)
plt.title('Distribution of Transaction Amounts Across Different Merchant Categories')
plt.xlabel('Merchant Category')
plt.ylabel('Transaction Amount')
plt.show()

# 2.Which cities have the highest number of fraudulent transactions?

# Filter the dataset for fraudulent transactions
fraudulent_transactions = df_cleaned[df_cleaned['is_fraud'] == 1]

# Group by city and count the number of fraudulent transactions
fraud_by_city = fraudulent_transactions['city'].value_counts()

# Display the top cities with the highest number of fraudulent transactions
top_cities = fraud_by_city.head(10)  # Adjust the number as needed
print(top_cities)

# Visualize the results
plt.figure(figsize=(12, 8))
sns.barplot(x=top_cities.values, y=top_cities.index, palette='viridis')
plt.title('Top Cities with Highest Number of Fraudulent Transactions')
plt.xlabel('Number of Fraudulent Transactions')
plt.ylabel('City')
plt.show()

#3. Is there a correlation between customer age (based on date of birth) and tendency towards fraudulent transactions?

from datetime import datetime

# Calculate the age of each customer
df_cleaned['dob'] = pd.to_datetime(df_cleaned['dob'])
df_cleaned['age'] = (datetime.now() - df_cleaned['dob']).dt.days // 365

# Check correlation between age and fraud
age_fraud_correlation = df_cleaned[['age', 'is_fraud']].corr()
print(age_fraud_correlation)

# Plot the relationship
plt.figure(figsize=(10, 6))
sns.boxplot(x='is_fraud', y='age', data=df_cleaned)
plt.title('Customer Age vs. Fraudulent Transactions')
plt.xlabel('Fraudulent Transaction')
plt.ylabel('Age')
plt.show()

# 4. Are certain types of jobs/professions more susceptible to fraudulent transactions?

# Group by job and calculate the proportion of fraudulent transactions
job_fraud = df_cleaned.groupby('job')['is_fraud'].mean().sort_values(ascending=False)
print(job_fraud)

# Plot the results
plt.figure(figsize=(8, 4))
sns.barplot(x=job_fraud.index, y=job_fraud.values)
plt.xticks(rotation=90)
plt.title('Proportion of Fraudulent Transactions by Job')
plt.xlabel('Job')
plt.ylabel('Proportion of Fraudulent Transactions')
plt.show()

#5. What is the geographic distribution of fraudulent transactions across different states?

# Group by state and count the number of fraudulent transactions
state_fraud = df_cleaned[df_cleaned['is_fraud'] == 1].groupby('state').size().sort_values(ascending=False)
print(state_fraud)

# Plot the results
plt.figure(figsize=(12, 8))
sns.barplot(x=state_fraud.index, y=state_fraud.values)
plt.xticks(rotation=90)
plt.title('Number of Fraudulent Transactions by State')
plt.xlabel('State')
plt.ylabel('Number of Fraudulent Transactions')
plt.show()

# 6. Are there any patterns or clusters in the latitude and longitude coordinates associated with fraudulent transactions?

# Bin the longitude into ranges
long_bins = pd.cut(df_cleaned['merch_long'], bins=10)

# Create a new DataFrame with the binned coordinates and fraud count
geo_fraud = df_cleaned[df_cleaned['is_fraud'] == 1].groupby(long_bins).size().reset_index(name='fraud_count')

# Plot the results using a bar plot
plt.figure(figsize=(12, 8))
sns.barplot(x=geo_fraud['merch_long'], y=geo_fraud['fraud_count'])
plt.xticks(rotation=90)
plt.title('Fraudulent Transactions by Longitude Bins')
plt.xlabel('Longitude Bins')
plt.ylabel('Number of Fraudulent Transactions')
plt.show()

# 7. Is there a relationship between transaction amount and the likelihood of fraud?

# Plot the relationship between transaction amount and fraud
plt.figure(figsize=(10, 6))
sns.boxplot(x='is_fraud', y='amt', data=df_cleaned)
plt.ylim(0, 500)  # Limit the y-axis for better visualization
plt.title('Transaction Amount vs. Fraudulent Transactions')
plt.xlabel('Fraudulent Transaction')
plt.ylabel('Transaction Amount')
plt.show()

# 8. Are there any temporal patterns in the occurrence of fraudulent transactions (based on transaction date and time)?
# Convert transaction date and time to datetime format
df_cleaned['trans_date_trans_time'] = pd.to_datetime(df_cleaned['trans_date_trans_time'])

# Extract hour from transaction time
df_cleaned['trans_hour'] = df_cleaned['trans_date_trans_time'].dt.hour

# Plot the distribution of fraudulent transactions by hour
plt.figure(figsize=(10, 6))
sns.histplot(df_cleaned[df_cleaned['is_fraud'] == 1]['trans_hour'], bins=24, kde=True)
plt.title('Distribution of Fraudulent Transactions by Hour')
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Fraudulent Transactions')
plt.show()

# 9. Which merchant names are most frequently associated with fraudulent transactions?

# Group by merchant and count the number of fraudulent transactions
merchant_fraud = df_cleaned[df_cleaned['is_fraud'] == 1].groupby('merchant').size().sort_values(ascending=False).head(10)
print(merchant_fraud)

# Plot the results
plt.figure(figsize=(12, 8))
sns.barplot(x=merchant_fraud.index, y=merchant_fraud.values)
plt.xticks(rotation=90)
plt.title('Top 10 Merchants with Most Fraudulent Transactions')
plt.xlabel('Merchant')
plt.ylabel('Number of Fraudulent Transactions')
plt.show()

# 10. Are there any missing or inconsistent data points that need to be addressed for better analysis?
# Check for missing values
missing_values = df_cleaned.isnull().sum()
print(missing_values)

# Visualize missing values
plt.figure(figsize=(12, 8))
sns.heatmap(df_cleaned.isnull(), cbar=False, cmap='viridis')
plt.title('Missing Data Heatmap')
plt.show()